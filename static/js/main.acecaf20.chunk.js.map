{"version":3,"sources":["styles/index.js","components/SearchBar.js","components/DayCard.js","components/DayDetails.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["tealBorder","concat","CardWrapper","styled","article","_templateObject","props","isSelected","DetailsWrapper","Card","_templateObject2","FormWrapper","Form","_templateObject3","SearchBar","react_default","a","createElement","inline","onSubmit","handleFormSubmit","FormGroup","Label","for","hidden","Input","type","name","id","placeholder","onChange","handleInputChange","value","searchTerm","Button","onClick","DayCard","console","log","Col","selectDay","CardHeader","day","CardBody","temp","src","process","icon","alt","description","high","low","precip","DayDetails","API","location","axios","get","then","res","data","results","length","alert","_res$data$results$0$g","geometry","lat","lon","lng","catch","err","App","_useState","useState","selectedDay","days","_useState2","Object","slicedToArray","weatherInfo","setWeatherinfo","useEffect","getWeather","city_name","state_code","Container","Row","md","components_SearchBar","e","target","_e$target","objectSpread","defineProperty","preventDefault","map","components_DayCard","key","ts","moment","valid_date","format","weather","max_temp","min_temp","pop","components_DayDetails","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.acecaf20.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nimport {Card, Form} from 'reactstrap'\r\n\r\nconst teal = '#A0A0A0';\r\nconst tealBorder = `2px solid ${teal}`;\r\n\r\nexport const CardWrapper = styled.article`\r\n    :hover {\r\n        cursor: pointer;\r\n        .card {\r\n            border-color: ${teal};\r\n        }\r\n    }\r\n    text-align: center;\r\n    img {\r\n        width: 80px;\r\n    }\r\n\r\n    .card{\r\n        background-color: #F5F5F5;\r\n    }\r\n\r\n    .card-body{\r\n        padding: 1.25rem 0.5rem;\r\n    }\r\n    .card-header{\r\n        font-weight: bold;\r\n        background-color: ${props => props.isSelected ? teal : null};\r\n    }\r\n`\r\n\r\nexport const DetailsWrapper = styled(Card)`\r\n    border: ${tealBorder};\r\n    text-align: center;\r\n    padding: 1rem;\r\n    margin 1.5rem 0;\r\n    img {\r\n        width: 110px;\r\n        margin: 0 auto;\r\n    }    \r\n`\r\n\r\nexport const FormWrapper = styled(Form)`\r\n    input.form-control {\r\n        width: 300px;\r\n        padding: 5px\r\n    }\r\n    button {\r\n        background: teal;\r\n        padding: 5px\r\n    }\r\n`","import React from \"react\";\r\nimport { FormGroup, Label, Input, Button } from 'reactstrap';\r\nimport { FormWrapper } from '../styles'\r\n\r\n//react component is function props are args\r\nconst SearchBar = props => {\r\n  return (\r\n    <FormWrapper inline onSubmit={props.handleFormSubmit}>\r\n    <FormGroup>\r\n      <Label for=\"searchTerm\" hidden>Location Search</Label>\r\n      <Input\r\n        type=\"text\"\r\n        name=\"searchTerm\"\r\n        id=\"searchTerm\"\r\n        placeholder=\"Location or Landmark\"\r\n        onChange={props.handleInputChange}\r\n        value={props.searchTerm}\r\n      />\r\n      <Button onClick={props.handleFormSubmit}>Search</Button>\r\n    </FormGroup>\r\n    </FormWrapper>\r\n  )\r\n}\r\n\r\nexport default SearchBar;","import React from \"react\";\r\nimport { Col, Card, CardHeader, CardBody } from 'reactstrap';\r\nimport { CardWrapper } from '../styles';\r\n\r\n//react component is function props are args\r\nconst DayCard = props => {\r\n  console.log(props);\r\n  return (\r\n    <Col>\r\n      <CardWrapper isSelected={props.isSelected} onClick={props.selectDay}>\r\n      <Card>\r\n        <CardHeader>{props.day}</CardHeader>\r\n        <CardBody>\r\n          <h3>{props.temp}°</h3>\r\n          <img src={`${process.env.PUBLIC_URL}/icons/${props.icon}.png`} alt={props.description} />\r\n          <p>High: {props.high}°</p>\r\n          <p>Low: {props.low}°</p>\r\n          <p>Precip: {props.precip}%</p>\r\n        </CardBody>\r\n      </Card>\r\n      </CardWrapper>\r\n    </Col>\r\n  )\r\n}\r\n\r\nexport default DayCard;","import React from \"react\";\r\nimport {DetailsWrapper} from '../styles';\r\n\r\n//react component is function props are args\r\nconst DayDetails = props => {\r\n  return (\r\n    <DetailsWrapper>\r\n      <h2>Weather Info for {props.day}</h2>\r\n      <h3>Average Temperature: {props.temp}°</h3>\r\n          <img src={`${process.env.PUBLIC_URL}/icons/${props.icon}.png`} alt={props.description} />\r\n          <p>High: {props.high}°</p>\r\n          <p>Low: {props.low}°</p>\r\n          <p>Precip: {props.precip}%</p>\r\n    </DetailsWrapper>\r\n  )\r\n}\r\n\r\nexport default DayDetails;","import axios from 'axios';\r\nconst googleKey = process.env.REACT_APP_GOOGLE_KEY;\r\nconst weatherKey = process.env.REACT_APP_WEATHER_KEY;\r\n\r\nexport default {\r\n    getWeather: function(location) {\r\n        return axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${location}&key=${googleKey}`)\r\n            .then(res => {\r\n                // console.log(res);\r\n\r\n                if (!res.data.results.length) {\r\n                    return alert('Not a valid location.');\r\n                }\r\n\r\n                const { lat, lng: lon } = res.data.results[0].geometry.location;\r\n                return axios.get(`https://api.weatherbit.io/v2.0/forecast/daily?lat=${lat}&lon=${lon}&key=${weatherKey}&units=I&days=7`)\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport moment from 'moment';\n// import sampleData from \"./data/sample.json\";\nimport SearchBar from \"./components/SearchBar\";\nimport DayCard from \"./components/DayCard\";\nimport DayDetails from \"./components/DayDetails\";\nimport API from \"./utils/API\";\n\nconst App = () => {\n\n  const [weatherInfo, setWeatherinfo] = useState({\n    searchTerm: '',\n    selectedDay: null,\n    days: [],\n    location: ''\n  });\n\n  const { searchTerm, selectedDay, days, location } = weatherInfo;\n\n  useEffect(() => {\n    getWeather('Boise, ID')\n  }, []);\n\n  const getWeather = location => {\n    if(!location) {\n      return alert('No location provided.');\n    }\n\n    API.getWeather(location)\n    .then(res => {\n      if (res) {\n        setWeatherinfo({\n          searchTerm: '',\n          selectedDay: null,\n          days: res.data.data,\n          location: res.data.city_name + ', ' + res.data.state_code\n        });\n      }\n    })\n    .catch(err => console.log(err));\n  }\n\n  const handleInputChange = e => {\n    console.log(e.target);\n    const { name, value } = e.target;\n    setWeatherinfo({ ...weatherInfo, [name]: value})\n  }\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    getWeather(searchTerm);\n  }\n\n  return (\n    <Container>\n      <Row>\n        <Col md={7}>\n          <h1>Weather Info for {location}</h1>\n        </Col>\n        <Col md={5}>\n          <SearchBar\n            searchTerm={searchTerm}\n            handleInputChange={handleInputChange}\n            handleFormSubmit={handleFormSubmit}\n          />\n        </Col>\n      </Row>\n      <Row>\n        {/* parens are implict return */}\n        {days.map(day => (\n          <DayCard\n            key={day.ts}\n            day={moment(day.valid_date, 'YYYY-MM-DD').format('dddd')}\n            icon={day.weather.icon}\n            description={day.weather.description}\n            temp={day.temp}\n            high={day.max_temp}\n            low={day.min_temp}\n            precip={day.pop}\n            isSelected={day === selectedDay}\n            selectDay={() => setWeatherinfo({ ...weatherInfo, selectedDay: day })}\n          />\n\n\n        ))}\n      </Row>\n      <Row>\n        <Col>\n          {selectedDay ? (\n            <DayDetails\n              day={moment(selectedDay.valid_date, 'YYYY-MM-DD').format('dddd, MMMM Do, YYYY')}\n              icon={selectedDay.weather.icon}\n              description={selectedDay.weather.description}\n              temp={selectedDay.temp}\n              high={selectedDay.max_temp}\n              low={selectedDay.min_temp}\n              precip={selectedDay.pop}\n            />\n          ) : (\n              <h3>Click on a day above to view details</h3>\n            )}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// adds bootstrap styles\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}